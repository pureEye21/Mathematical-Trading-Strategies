import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

data = pd.read_csv('AAPL.csv')

def calculate_indicator(data):
    data['EMA'] = data['Close'].rolling(window=20).mean()
    data['ATR'] = data['High'] - data['Low']
    data['upper_band'] = data['EMA'] + 2 * data['ATR']
    data['lower_band'] = data['EMA'] - 2 * data['ATR']
    
    return data[['upper_band', 'lower_band']]

def detect_hammer_candlestick(data):
    data['body_size'] = abs(data['Close'] - data['Open'])
    data['upper_wick'] = data['High'] - data[['Open', 'Close']].max(axis=1)
    data['lower_wick'] = data[['Open', 'Close']].min(axis=1) - data['Low']
    data['is_hammer'] = (data['body_size'] < 0.3 * data['Close']) & (data['lower_wick'] > 2 * data['body_size'])
    
    return data['is_hammer']

data[['upper_band', 'lower_band']] = calculate_indicator(data)
data['is_hammer'] = detect_hammer_candlestick(data)

def implement_trading_strategy(data):
    position = 0  
    buy_price = 0
    sell_price = 0
    trades = []

    for i in range(1, len(data)):
        if data['is_hammer'].iloc[i] and position == 0:
            position = 1
            buy_price = data['Close'].iloc[i]
        elif data['is_hammer'].iloc[i] and position == 1:
            position = -1
            sell_price = data['Close'].iloc[i]
            trades.append(sell_price - buy_price)
            buy_price = 0
            sell_price = 0
        elif data['is_hammer'].iloc[i] and position == -1:
            position = 1
            buy_price = data['Close'].iloc[i]

    cumulative_returns = np.cumprod(1 + np.array(trades))
    return cumulative_returns

cumulative_returns = implement_trading_strategy(data)

cumulative_high = np.maximum.accumulate(cumulative_returns)
drawdown = (cumulative_high - cumulative_returns) / cumulative_high
max_drawdown = np.max(drawdown)

risk_free_rate = 0.05
daily_returns = np.diff(cumulative_returns)
sharpe_ratio = (np.mean(daily_returns) - risk_free_rate) / np.std(daily_returns)

plt.plot(data['Date'].iloc[1:], cumulative_returns)
plt.xlabel('Date')
plt.ylabel('Cumulative Returns')
plt.title('Cumulative Returns for the Trading Strategy')
plt.show()
